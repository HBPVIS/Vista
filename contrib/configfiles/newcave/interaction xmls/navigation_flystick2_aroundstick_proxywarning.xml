<!-- $Id$ -->
<!--
	configuration for a flystick navigation controlled by pointing position and the coolie hat
	this variant uses the flystick's current position as pivot for the rotation
-->
<module>
	<nodespace>
	</nodespace>
	<graph>
		<!-- driver -->
		<node name="flystick_source" type="DriverSensor">
			<param name="sensor_name" value="STICK_SENSOR"/>
			<param name="type" value="STICK2"/>
			<param name="driver" value="DTRACK"/>
		</node>

		<node name="flystick" type="HistoryProject">
			<param name="project">POSITION, ORIENTATION, CONTROLLER, QUALITY</param>
		</node>
		
		<!-- quality check - only forward pos and ori if quality is good enough -->
		<node name="quality_threshold" type="Threshold[double]">
			<param name="threshold" value="0.1"/>
			<param name="mode" value="output_zero"/>
		</node>
		<node name="quality_to_bool" type="TypeConvert[double,bool]"/>
		<node name="quality_check" type="ConditionalRoute" />
		
		<!-- convert position to vista units -->
		<node name="to_dtrack_origin" type="ConstantValue[VistaVector3D]">
			<param name="value" value="0,0,0"/>
		</node>
		<node name="offset_rotate" type="Transform[VistaQuaternion,VistaVector3D]"/>
		<node name="translate_pos" type="Add[VistaVector3D]"/>
		<node name="scale_mm_to_m" type="ConstantValue[float]">
			<param name="value" value="0.001"/>
		</node>
		<node name="scale_pos" type="Multiply[float,VistaVector3D]"/>

		<!-- linear velocity at full speed, in m/s-->
		<node name="linear_speed" type="ConstantValue[float]">
			<param name="value" value="0.0"/>
		</node>
		<!-- angular velocity at full speed, in rad/s -> 3.1415 means half a turn per second -->
		<node name="angular_speed" type="ConstantValue[float]">
			<param name="value" value="3.1415"/> 
		</node>
		
		<node name="mult_linear_speed" type="Multiply[float]"/>
		<node name="mult_angular_speed" type="Multiply[float]"/>
		
		<!-- creating the movement direction -->
		<node name="point_dir_base" type="ConstantValue[VistaVector3D]">
			<param name="value" value="0, 0, -1"/>
		</node>
		<node name="point_dir" type="Transform[VistaQuaternion,VistaVector3D]"/>
		

		<!-- creating the rotation, which is just a full turn around y -->
		<node name="rotate_quat" type="ConstantValue[VistaQuaternion]">
			<param name="value" value="0, -1, 0, 0"/>
		</node>

		<!-- Application -->
		<node name="get_transform" type="GetTransform">
			<param name="object" value="CAM:MAIN"/>
		</node>
		<node name="set_transform" type="SetTransform">
			<param name="object" value="CAM:MAIN"/>
		</node>

		<node name="timer" type="Timer"/>
		
		<node name="navigator" type="Navigation">
			<!-- available modes: unconstrained (default), yaw_only, no_roll -->
			<!-- note: mode doesn't really matter, since we only probide yaw anyway -->
			<param name="default_navigation_mode" value="unconstrained" />
		</node>
		
		<!-- proximity warning node to indicate when one gets too close to walls -->
		<!-- note: check for duplicates with other flystick ProximityWarning in other xml's -->
		<node name="proximity" type="ProximityWarning">
			<param name="box_min" value="-2.625, -0.2, -2.625"/> <!-- slightly below floor, so that warning apears later -->
			<param name="box_max" value=" 2.625, 10,  2.625"/>
			<param name="safe_distance" value="0.5"/>
			<param name="danger_distance" value="0.3"/>
			<param name="type" value="sign"/>
			<param name="size" value="0.5"/>
		</node>
		
	</graph>
	<edges>
		<edge fromnode="flystick_source" tonode="flystick" fromport="history" toport="history" />
		
		<!-- quality check -->
		<edge fromnode="flystick" tonode="quality_threshold" fromport="QUALITY" toport="in" />
		<edge fromnode="quality_threshold" tonode="quality_to_bool" fromport="out" toport="in" />
		<edge fromnode="quality_to_bool" tonode="quality_check" fromport="out" toport="trigger" />
		<edge fromnode="flystick" tonode="quality_check" fromport="POSITION" toport="position" />
		<edge fromnode="flystick" tonode="quality_check" fromport="ORIENTATION" toport="orientation" />
		
		<!-- calc and set pivot -->
		<edge fromnode="quality_check" tonode="offset_rotate" fromport="orientation" toport="first"/>
		<edge fromnode="to_dtrack_origin" tonode="offset_rotate" fromport="value" toport="second"/>
		<edge fromnode="quality_check" tonode="translate_pos" fromport="position" toport="first"/>
		<edge fromnode="offset_rotate" tonode="translate_pos" fromport="out" toport="second"/>
		<edge fromnode="translate_pos" tonode="scale_pos" fromport="out" toport="second"/>
		<edge fromnode="scale_mm_to_m" tonode="scale_pos" fromport="value" toport="first"/>
		<edge fromnode="scale_pos" tonode="navigator" fromport="out" toport="pivot"/>
		
		<!-- calculate and set velocities from controller input -->
		<edge fromnode="linear_speed" tonode="mult_linear_speed" fromport="value" toport="first" />
		<edge fromnode="flystick" tonode="mult_linear_speed" fromport="CONTROLLER_1" toport="second" />
		
		<edge fromnode="angular_speed" tonode="mult_angular_speed" fromport="value" toport="first" />
		<edge fromnode="flystick" tonode="mult_angular_speed" fromport="CONTROLLER_0" toport="second" />
		
		<!-- calculate and set pointing dir and rotation -->
		<edge fromnode="quality_check" tonode="point_dir" fromport="orientation" toport="first" />
		<edge fromnode="point_dir_base" tonode="point_dir" fromport="value" toport="second" />
				
		<!-- Navigation edges-->
		<edge fromnode="mult_linear_speed" tonode="navigator" fromport="out" toport="linear_velocity" />
		<edge fromnode="mult_angular_speed" tonode="navigator" fromport="out" toport="angular_velocity" />
		<edge fromnode="point_dir" tonode="navigator" fromport="out" toport="translation" />
		<edge fromnode="rotate_quat" tonode="navigator" fromport="value" toport="rotation" />
		
		<edge fromnode="timer" tonode="navigator" fromport="dt" toport="dt"/>
		<edge fromnode="get_transform" tonode="navigator" fromport="transform" toport="transform"/>
		<edge fromnode="navigator" tonode="set_transform" fromport="transform" toport="in"/>

		<!-- proximity warning --> 
		<edge fromnode="proximity_warning_state" tonode="proximity" fromport="value" toport="enabled"/>
		<edge fromnode="quality_check" tonode="proximity" fromport="position" toport="user_position" />
	</edges>
</module>
