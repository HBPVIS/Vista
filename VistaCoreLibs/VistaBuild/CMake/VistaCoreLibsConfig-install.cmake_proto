set( VISTACORELIBS_RELATIVE_INCLUDE_DIRS @_PACKAGE_RELATIVE_INCLUDE_DIRS@ )
set( VISTACORELIBS_RELATIVE_LIBRARY_DIRS @_PACKAGE_RELATIVE_LIBRARY_DIRS@ )
set( @_PACKAGE_NAME_UPPER@_DEFINITIONS @_PACKAGE_DEFINITIONS@ )
set( VISTACORELIBS_HWARCH "@VISTA_HWARCH@" )
set( VISTACORELIBS_COMPONENTS @VISTACORELIBS_COMPONENTS@ )

set( VISTACORELIBS_VERSION @VISTACORELIBS_VERSION@ )
set( VISTACORELIBS_VERSION_EXT @VISTACORELIBS_VERSION_EXT@ )

# we're getting installed to ROOT_DIR/cmake, so to get our root dir, we have to take the current dir
# and look for the lib dir, which can be one, two, or three steps up
# we check if the folder is correct by testing if the first library dir exists there
set( _TEST_DIR "${VistaCoreLibs_DIR}" )
list( GET VISTACORELIBS_RELATIVE_LIBRARY_DIRS 0 _TEST_SUBDIR )	
foreach( _STEP RANGE 3 )
	get_filename_component( _TEST_DIR "${_TEST_DIR}" PATH ) # one dir up
	if( EXISTS "${_TEST_DIR}/${_TEST_SUBDIR}" )
		set(  VISTACORELIBS_ROOT_DIR ${_TEST_DIR} )
		break()
	endif( EXISTS "${_TEST_DIR}/${_TEST_SUBDIR}" )
endforeach( _STEP RANGE 3 )

if( NOT VISTACORELIBS_ROOT_DIR )
	message( SEND_ERROR "Package configfile for \"VistaCoreLibs\" found in \"${VistaCoreLibs_DIR}\", "
                       "but matching library directory is missing" )
endif( NOT VISTACORELIBS_ROOT_DIR )

# set include/lib dirs relative to root dir
set( VISTACORELIBS_INCLUDE_DIRS  )
foreach( _DIR ${VISTACORELIBS_RELATIVE_INCLUDE_DIRS} )
	list( APPEND VISTACORELIBS_INCLUDE_DIRS "${VISTACORELIBS_ROOT_DIR}/${_DIR}" )
endforeach( _DIR ${VISTACORELIBS_RELATIVE_INCLUDE_DIRS} )

set( VISTACORELIBS_LIBRARY_DIRS  )
set( VISTACORELIBS_DRIVER_PLUGIN_DIRS )
foreach( _DIR ${VISTACORELIBS_RELATIVE_LIBRARY_DIRS} )
	list( APPEND VISTACORELIBS_LIBRARY_DIRS "${VISTACORELIBS_ROOT_DIR}/${_DIR}" )
	
	string( REGEX MATCH ".*DriverPlugins" _MATCH "${_DIR}" )
	if( _MATCH )
		list( APPEND VISTACORELIBS_DRIVER_PLUGIN_DIRS "${VISTACORELIBS_ROOT_DIR}/${_DIR}" )
	endif( _MATCH )
endforeach( _DIR ${VISTACORELIBS_RELATIVE_LIBRARY_DIRS} )
list( APPEND VISTACORELIBS_INCLUDE_DIRS ${VISTACORELIBS_DRIVER_PLUGIN_DIRS} )


macro( _local_vcl_use_component _COMPONENT )
	string( TOUPPER ${_COMPONENT} _COMPONENT_UPPER )
	if( NOT ${_COMPONENT_UPPER}_FOUND ) # we may already have incuded it
		list( FIND VISTACORELIBS_COMPONENTS ${_COMPONENT} _COMPONENT_FOUND )
		if( _COMPONENT_FOUND EQUAL -1 )
			if( VistaCoreLibs_FIND_REQUIRED_${_COMPONENT} )
				message( SEND_ERROR "VistaCoreLibsConfig - Component \"${_COMPONENT}\" not available" )
			else( VistaCoreLibs_FIND_REQUIRED_${_COMPONENT} )
				message( WARNING "VistaCoreLibsConfig - Component \"${_COMPONENT}\" not available" )
			endif( VistaCoreLibs_FIND_REQUIRED_${_COMPONENT} )
		else( _COMPONENT_FOUND EQUAL -1 )
			set( ${_COMPONENT_UPPER}_FOUND TRUE )
			
			if( ${_COMPONENT} STREQUAL "VistaKernelOpenSGExt" )
				_local_vcl_use_component( "VistaKernel" )
			elseif( ${_COMPONENT} STREQUAL "VistaKernel" )
				_local_vcl_use_component( "VistaDataFlowNet" )
			elseif( ${_COMPONENT} STREQUAL "VistaInterProcComm" )
				_local_vcl_use_component( "VistaTools" )
				_local_vcl_use_component( "VistaAspects" )
				_local_vcl_use_component( "VistaBase" )
			elseif( ${_COMPONENT} STREQUAL "VistaDataFlowNet" )
				_local_vcl_use_component( "VistaDeviceDriversBase" )
			elseif( ${_COMPONENT} STREQUAL "VistaDeviceDriversBase" )
				_local_vcl_use_component( "VistaInterProcComm" )
				_local_vcl_use_component( "VistaTools" )
				_local_vcl_use_component( "VistaMath" )
				_local_vcl_use_component( "VistaAspects" )				
			elseif( ${_COMPONENT} STREQUAL "VistaMath" )
				_local_vcl_use_component( "VistaBase" )
			elseif( ${_COMPONENT} STREQUAL "VistaTools" )
				_local_vcl_use_component( "VistaBase" )
			elseif( ${_COMPONENT} STREQUAL "VistaAspects" )
				_local_vcl_use_component( "VistaBase" )
			endif( ${_COMPONENT} STREQUAL "VistaKernelOpenSGExt" )
			
			set( ${_COMPONENT_UPPER}_LIBRARIES )
			set( ${_COMPONENT_UPPER}_LIBRARY_DIRS ${VISTACORELIBS_LIBRARY_DIRS} )
			set( ${_COMPONENT_UPPER}_INCLUDE_DIRS ${VISTACORELIBS_INCLUDE_DIRS} )
			set( ${_COMPONENT_UPPER}_DEFINITIONS ${VISTACORELIBS_DEFINITIONS} )
			list( APPEND VISTACORELIBS_LIBRARIES optimized ${_COMPONENT} debug ${_COMPONENT}D )
			list( APPEND VISTACORELIBS_FOUND_COMPONENTS ${_COMPONENT} )

		endif( _COMPONENT_FOUND EQUAL -1 )
	endif( NOT ${_COMPONENT_UPPER}_FOUND )
endmacro( _local_vcl_use_component _COMPONENT )

# Add platform defines
if(UNIX)
	set( VISTACORELIBS_DEFINITIONS -DLINUX )
elseif(WIN32)
	set( VISTACORELIBS_DEFINITIONS -DWIN32 )
endif(UNIX)

if( NOT VistaCoreLibs_FIND_COMPONENTS )
	#just add everything we got
	foreach( _COMPONENT ${VISTACORELIBS_COMPONENTS} )
		string( TOUPPER ${_COMPONENT} _COMPONENT_UPPER )
		set( ${_COMPONENT_UPPER}_FOUND TRUE )
		set( ${_COMPONENT_UPPER}_LIBRARIES )
		set( ${_COMPONENT_UPPER}_LIBRARY_DIRS ${VISTACORELIBS_LIBRARY_DIRS} )
		set( ${_COMPONENT_UPPER}_INCLUDE_DIRS ${VISTACORELIBS_INCLUDE_DIRS} )
		set( ${_COMPONENT_UPPER}_DEFINITIONS ${VISTACORELIBS_DEFINITIONS} )
		list( APPEND VISTACORELIBS_LIBRARIES optimized ${_COMPONENT} debug ${_COMPONENT}D )
	endforeach( _COMPONENT ${VISTACORELIBS_COMPONENTS} )
else( NOT VistaCoreLibs_FIND_COMPONENTS )
	# we add the requested components, as well as components it depends on
	foreach( _COMPONENT ${VistaCoreLibs_FIND_COMPONENTS} )
		_local_vcl_use_component( ${_COMPONENT} )
	endforeach( _COMPONENT ${VistaCoreLibs_FIND_COMPONENTS} )
endif( NOT VistaCoreLibs_FIND_COMPONENTS )

# depending on whether or not the Kernel is used, we may need OpenSG and glut
if( VISTAKERNELOPENSGEXT_FOUND )
	set( VISTACORELIBS_DEPENDENCIES @VISTAKERNELOPENSGEXT_DEPENDENCIES@ )
elseif( VISTAKERNEL_FOUND )
	set( VISTACORELIBS_DEPENDENCIES @VISTAKERNEL_DEPENDENCIES@ )
else( VISTAKERNELOPENSGEXT_FOUND )
	set( VISTACORELIBS_DEPENDENCIES )
endif( VISTAKERNELOPENSGEXT_FOUND )

set( VISTACORELIBS_FOUND TRUE )
